name: packer_ami

on:
  push:
    branches:
      - main

check-repository:
    runs-on: ubuntu-latest
    steps:
      - name: Check Repository
        if: github.repository != 'NS-CC-CSYE6225/webapp1'
        run: |
          echo "Not pushing to the org repository. Skipping the workflow."
          exit 78

jobs:
  build-ami:
    runs-on: ubuntu-latest
    needs: check-repository

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: Pa55w0rd@1
          MYSQL_DATABASE: TestDb1
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v2

      - name: Set Up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  packer-build:
    runs-on: ubuntu-latest
    needs: check-repository
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Zip Repository
        run: |
          ls -al
          pwd
          npm i
          ls -al
          zip -r webapp1.zip . -x ".git"
          ls -al
          pwd

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: webapp1
          path: webapp1.zip

      - name: Print Working Directory
        run: |
          ls -al
          pwd

      - name: Install Packer plugins
        run: packer init .

      - name: Build Packer Template
        run: |
          ls -al
          pwd
          # cd /home/runner/work/webapp1/webapp1
          packer build my-api.pkr.hcl

  deploy:
      name: deploy AMI
      runs-on: ubuntu-latest
      needs: build-ami 

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1


      steps:
          - name: checkout
            uses: actions/checkout@v3

          - name: Setup Demo Environment
            run: |
              export AWS_ACCESS_KEY_ID=${{secrets.DEMO_AWS_ACCESS_KEY_ID}}
              export AWS_SECRET_ACCESS_KEY=${{secrets.DEMO_AWS_SECRET_ACCESS_KEY}}

          - name: Get Auto Scaling Group and Launch Template
            id: get_asg_and_lt
            run: |
                LT_NAME_PREFIX="my-launch-template"
              
                LT_NAME=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?starts_with(LaunchTemplateName, '${LT_NAME_PREFIX}')].LaunchTemplateName" --output text)
              
                if [ -z "$LT_NAME" ]; then
                  echo "No Launch Template found with the specified prefix."
                  exit 1
                fi
              
                ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(LaunchTemplate.LaunchTemplateName, '${LT_NAME}')].AutoScalingGroupName" --output text)
              
                if [ -z "$ASG_NAME" ]; then
                  echo "No Auto Scaling Group found using the Launch Template."
                  exit 1
                fi
            
                ASG_ID=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME --query 'AutoScalingGroups[0].AutoScalingGroupARN' --output text | cut -d':' -f 6)
                LT_ID=$(aws ec2 describe-launch-templates --launch-template-names $LT_NAME --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
            
                echo "Auto Scaling Group Name: $ASG_NAME"
                echo "Auto Scaling Group ID: $ASG_ID"
                echo "Launch Template Name: $LT_NAME"
                echo "Launch Template ID: $LT_ID"

                AMI_ID=$(aws ec2 describe-images \
                --executable-users ${{secrets.USER}} \
                --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
                --filters "Name=name,Values=csye6225_f23_2023_*" \
                --output text 
                )
  
                aws ec2 create-launch-template-version --launch-template-id $LT_ID \
                --version-description "Latest AMI version" \
                --source-version 1 \
                --launch-template-data "ImageId=$AMI_ID"
              
                echo "::set-output name=asg_name::$ASG_NAME"
                echo "::set-output name=asg_id::$ASG_ID"
                echo "::set-output name=lt_name::$LT_NAME"
                echo "::set-output name=lt_id::$LT_ID"

          - name: Trigger Auto Scaling Group Instance Refresh with Latest Launch Template
            run: |
                ASG_NAME="${{ steps.get_asg_and_lt.outputs.asg_name }}"

                LT_NAME_PREFIX="my-launch-template"
            
                LT_NAME=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?starts_with(LaunchTemplateName, '${LT_NAME_PREFIX}')].LaunchTemplateName" --output text)
                
                # Get the latest version of the Launch Template
                LATEST_LT_VERSION=$(aws ec2 describe-launch-templates --launch-template-names ${LT_NAME} --query "LaunchTemplates[0].LatestVersionNumber" --output text)

            
                # Update the Auto Scaling Group with the latest Launch Template version
                aws autoscaling update-auto-scaling-group \
                  --auto-scaling-group-name $ASG_NAME \
                  --launch-template "LaunchTemplateName=$LT_NAME,Version=$LATEST_LT_VERSION"
            
                # Trigger an instance refresh with the latest Launch Template as default
                aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME --strategy Rolling
          
          - name: Wait for Auto Scaling Group Instance Refresh Completion
            run: |
              ASG_NAME="${{ steps.get_asg_and_lt.outputs.asg_name }}"
              REFRESH_STATUS=""
              while [[ "$REFRESH_STATUS" != "Successful" && "$REFRESH_STATUS" != "Failed" ]]; do
                REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --query 'InstanceRefreshes[0].Status' --output text)

                echo "Instance Refresh Status: $REFRESH_STATUS"
                sleep 15
              done
                
              # Check the instance refresh status and fail the workflow if it failed
              if [[ "$REFRESH_STATUS" == "Failed" ]]; then
                echo "Instance refresh failed. Workflow failed."
                exit 1
              else
                echo "Instance refresh completed successfully."
              fi        